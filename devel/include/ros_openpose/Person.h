// Generated by gencpp from file ros_openpose/Person.msg
// DO NOT EDIT!


#ifndef ROS_OPENPOSE_MESSAGE_PERSON_H
#define ROS_OPENPOSE_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_openpose/BodyPart.h>
#include <ros_openpose/BodyPart.h>
#include <ros_openpose/BodyPart.h>

namespace ros_openpose
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : bodyParts()
    , leftHandParts()
    , rightHandParts()  {
    }
  Person_(const ContainerAllocator& _alloc)
    : bodyParts(_alloc)
    , leftHandParts(_alloc)
    , rightHandParts(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_openpose::BodyPart_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_openpose::BodyPart_<ContainerAllocator> >::other >  _bodyParts_type;
  _bodyParts_type bodyParts;

   typedef std::vector< ::ros_openpose::BodyPart_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_openpose::BodyPart_<ContainerAllocator> >::other >  _leftHandParts_type;
  _leftHandParts_type leftHandParts;

   typedef std::vector< ::ros_openpose::BodyPart_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_openpose::BodyPart_<ContainerAllocator> >::other >  _rightHandParts_type;
  _rightHandParts_type rightHandParts;





  typedef boost::shared_ptr< ::ros_openpose::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_openpose::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::ros_openpose::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::ros_openpose::Person > PersonPtr;
typedef boost::shared_ptr< ::ros_openpose::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_openpose::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_openpose::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_openpose::Person_<ContainerAllocator1> & lhs, const ::ros_openpose::Person_<ContainerAllocator2> & rhs)
{
  return lhs.bodyParts == rhs.bodyParts &&
    lhs.leftHandParts == rhs.leftHandParts &&
    lhs.rightHandParts == rhs.rightHandParts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_openpose::Person_<ContainerAllocator1> & lhs, const ::ros_openpose::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_openpose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_openpose::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_openpose::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_openpose::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_openpose::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_openpose::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_openpose::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_openpose::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cbfeaba995a09efdb2c52e51374390b";
  }

  static const char* value(const ::ros_openpose::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cbfeaba995a09efULL;
  static const uint64_t static_value2 = 0xdb2c52e51374390bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_openpose::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_openpose/Person";
  }

  static const char* value(const ::ros_openpose::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_openpose::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A person has some body parts. That is why we have created\n"
"# an array of body parts.\n"
"BodyPart[] bodyParts\n"
"BodyPart[] leftHandParts\n"
"BodyPart[] rightHandParts\n"
"\n"
"================================================================================\n"
"MSG: ros_openpose/BodyPart\n"
"# The location and score of body parts are stored in a float array.\n"
"# Therefore we are using 32 bits instead of 64 bits.\n"
"# src: https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/include/openpose/core/datum.hpp\n"
"float32 score\n"
"Pixel pixel\n"
"geometry_msgs/Point32 point\n"
"\n"
"================================================================================\n"
"MSG: ros_openpose/Pixel\n"
"# The location and score of body parts are stored in a float array.\n"
"# Therefore we are using 32 bits instead of 64 bits.\n"
"# src: https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/include/openpose/core/datum.hpp\n"
"# The location has been resized to the desired output\n"
"# resolution (e.g., `resolution` flag in the demo).\n"
"float32 x\n"
"float32 y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::ros_openpose::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_openpose::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bodyParts);
      stream.next(m.leftHandParts);
      stream.next(m.rightHandParts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_openpose::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_openpose::Person_<ContainerAllocator>& v)
  {
    s << indent << "bodyParts[]" << std::endl;
    for (size_t i = 0; i < v.bodyParts.size(); ++i)
    {
      s << indent << "  bodyParts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_openpose::BodyPart_<ContainerAllocator> >::stream(s, indent + "    ", v.bodyParts[i]);
    }
    s << indent << "leftHandParts[]" << std::endl;
    for (size_t i = 0; i < v.leftHandParts.size(); ++i)
    {
      s << indent << "  leftHandParts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_openpose::BodyPart_<ContainerAllocator> >::stream(s, indent + "    ", v.leftHandParts[i]);
    }
    s << indent << "rightHandParts[]" << std::endl;
    for (size_t i = 0; i < v.rightHandParts.size(); ++i)
    {
      s << indent << "  rightHandParts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_openpose::BodyPart_<ContainerAllocator> >::stream(s, indent + "    ", v.rightHandParts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_OPENPOSE_MESSAGE_PERSON_H
